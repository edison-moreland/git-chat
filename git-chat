#!/bin/bash

inGitChatRepo () {
	# Check that we're in a git repo
	if [ ! -d ".git" ]; then
		return 1
	fi

	# Check that it's a GitChat repo
	if [ ! -f ".gitchat" ]; then
		return 1
	fi

	return 0
}

ACTION=$1

# Action args start at $2
case "$ACTION" in
"new-chat")
	# Initialize local repo and remote
	CHATNAME="$2"
	UPSTREAM="$3"

	if [ "$CHATNAME" = "" ]; then
		# Replace with more robust check!
		echo "Chat name required"
		exit 1
	fi

	if [ "$UPSTREAM" = "" ]; then
		echo "Upstream required"
	fi

	git init "$CHATNAME"
	pushd "$CHATNAME" || exit 1
		:>| .gitchat
		git commit --allow-empty -m "New git chat"
		git remote add origin "$UPSTREAM"
		git push -u origin master
		git branch --set-upstream-to=origin/master master
	popd || exit 1
;;
"clone-chat")
	UPSTREAM="$2"

	if [ "$UPSTREAM" = "" ]; then
		echo "Upstream URL required!"
		exit 1
	fi

	git clone "$UPSTREAM"
;;
"new-message")
	if ! inGitChatRepo; then
		echo "Not in git chat repo! Create one with 'git-chat new-chat foo'"
		exit 1
	fi

	MESSAGE="$2"

	if [ "$MESSAGE" = "" ]; then
		echo "Message required!"
		exit 1
	fi
	git pull
	git commit --allow-empty -m "$MESSAGE"
	git push
;;
"show-messages")
	if ! inGitChatRepo; then
		echo "Not in git chat repo! Create one with 'git-chat new-chat foo'"
		exit 1	
	fi

	COUNT=$2
	if [ "$COUNT" = "" ]; then
		# Should also check that COUNT is numerical
		# tput isn't always available, stty should be used if it can't be found
		COUNT=$(tput lines)
		COUNT=$(( COUNT - 1 ))
	fi

	git pull
	git log -n $COUNT --reverse --pretty=format:"%h - %an, %ar : %s"
;;
"help"|*)
  cat <<EOF
git-chat new-chat <CHATNAME> <UPSTREAM>
git-chat clone-chat <UPSTREAM>
git-chat new-message <MESSAGE>
git-chat show-messages <optional:COUNT>
git-chat help
EOF
;;
esac
